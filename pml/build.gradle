
jar {
	manifest {
		attributes("Implementation-Title": "SORCER Volume service bean", "Implementation-Version": version)
	}
	classifier = "bean"
	dependsOn classes
	from sourceSets.main.output
	exclude('sorcer/pml/model/**')
}

task beanDlJar(type: Jar) {
	manifest {
		attributes("Implementation-Title": "SORCER Volume bean Exported Classes", "Implementation-Version": version)
	}
	classifier = "dl"
	dependsOn classes
	from sourceSets.main.output
	include('sorcer/pml/provider/*')
}

task modelJar(type: Jar) {
	manifest {
		attributes("Implementation-Title": "SORCER Proc-model", "Implementation-Version": version)
	}
    classifier = "model"
	dependsOn classes
	from sourceSets.main.output
	include('sorcer/pml/model/*')
}

artifacts {
    archives modelJar
}

install.dependsOn(['modelJar', 'beanDlJar'])
build.dependsOn(install)

dependencies {
	compile "org.sorcer:sorcer-platform:${sorcerVersion}"
	compile "org.sorcer:sorcer-lib:${sorcerVersion}"
	compile "org.sorcer:sos-caller:${sorcerVersion}"
    compile "org.sorcer:sos-db-prv:${sorcerVersion}"
	compile project(':sml')
	testCompile "org.sorcer:sorcer-test:${sorcerVersion}"
	testRuntime logRuntime
}

def repoPath() {
	return "org/sorcer/pml/${version}"
}

bootme {
	starterConfig = file("${projectDir.path}/configs/StartAll.groovy")
	systemProperties = ["local.repo.path" : repoPath(),
						"webster.url" : websterUrl,
						"project.version": project.version]
//	spawn = false
//	debug = true
}

test {

	systemProperty "java.rmi.server.codebase",
				   "${websterUrl}/${repoPath()}/pml-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"

	testLogging {
		events "passed", "skipped", "failed"/*, "standardOut", "standardError"*/
	}
//	dependsOn([install])
	dependsOn([install, bootme])
	finalizedBy(haltme)
}