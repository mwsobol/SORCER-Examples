/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Created by Mike Sobolewski on 8/5/15.
 */
jar {
    manifest {
        attributes("Implementation-Title": "Service Provider Classes",
                "Implementation-Version": sorcerVersion)
    }
    archiveBaseName = "coffeemaker"
    archiveClassifier = "prv"
    dependsOn classes
    from sourceSets.main.output
    exclude('edu/pjatk/inn/coffeemaker/requestor/**')
}

task servicePrvDlJar(type: Jar) {
    manifest {
        attributes("Implementation-Title": "Service Provider Exported Classes",
                "Implementation-Version": sorcerVersion)
    }
    archiveBaseName = "coffeemaker"
    archiveClassifier = "dl"
    dependsOn classes
    from sourceSets.main.output
    include('edu/pjatk/inn/coffeemaker/*')
    include('edu/pjatk/inn/coffeemaker/impl/Recipe.class')
    include('edu/pjatk/inn/coffeemaker/impl/Inventory.class')
    from sourceSets.main.resources
    include('sorcer.jpg')
}

task serviceReqJar(type: Jar) {
    manifest {
        attributes("Implementation-Title": "Service Requestor",
                "Implementation-Version": sorcerVersion)
    }
    archiveBaseName = "coffeemaker"
    archiveClassifier = "req"
    dependsOn classes
    from sourceSets.main.output
    include('edu/pjatk/inn/coffeemaker/requestor/**')
}

artifacts {
    archives servicePrvDlJar
    archives serviceReqJar
}

install.dependsOn(['servicePrvDlJar', 'serviceReqJar'])
build.dependsOn(install)

dependencies {
    compile "org.sorcer:sorcer-platform:${sorcerVersion}"
    compile "org.sorcer:sorcer-lib:${sorcerVersion}"
    compile "org.sorcer:sos-db-prv:${sorcerVersion}"
    testCompile "org.sorcer:sorcer-test:${sorcerVersion}"
    testRuntime "org.sorcer:webster:${sorcerVersion}"
    testRuntime logRuntime
}

def deployConfig = file("configs/coffeemaker-prv.config")
artifacts {
    archives deployConfig
}

def repoPath() {
    "${project.group.replace(".", "/")}/${project.name}/${version}"
}

bootme {
    description = 'Starts up a service provider'
    starterConfig = file("${projectDir.path}/configs/StartCoffeeMakerConfig.groovy")
    systemProperties = ["relative.repo.path" : repoPath(),
                        "webster.url" : websterUrl,
                        "project.version" : project.version]
//    spawn = false
//    debug = true
}

def script = "${project.buildDir}/bin/${project.name}.sh"

task ss {
    doFirst {
        File scriptDir = new File(project.buildDir, "bin")
        scriptDir.mkdirs()
        File scriptFile = new File(script)
        scriptFile.text = "java -cp ${project.buildDir}/classes/main:${sourceSets.main.runtimeClasspath.getAsPath()} edu.pjatk.inn.requestor.CoffeemakerClient"
        Process chmod = "chmod +x ${scriptFile.path}".execute()
        chmod.waitFor()
    }
}

// run with "gradle runCoffeemaker -q"
task runCoffeemaker(type:JavaExec, dependsOn:[install]) {
    description = 'Runs a Coffeemaker main.'
    main = "edu.pjatk.inn.requestor.CoffeemakerClient"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

//task runConsumer(type:JavaExec, dependsOn:[jar, "bootme"]) {
task runConsumer(type:JavaExec, dependsOn:[jar]) {
    description = 'Runs a service requestor executing a local or remote service.'
    main = "sorcer.core.consumer.ServiceConsumer"
    classpath = sourceSets.main.runtimeClasspath
//    standardOutput = System.out
    systemProperty "project.version", "${version}"
    systemProperty "java.rmi.server.codebase",
            "${websterUrl}/${repoPath()}/coffeemaker-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"
    
    dependsOn([install, bootme])
    args = ["edu.pjatk.inn.requestor.CoffeemakerConsumer", "block"]
//    args = ["edu.pjatk.inn.requestor.CoffeemakerConsumer", "remoteBlock"]
//    args = ["edu.pjatk.inn.requestor.CoffeemakerConsumer", "job"]
//    args = ["edu.pjatk.inn.requestor.CoffeemakerConsumer", "model"]
//    args = ["edu.pjatk.inn.requestor.CoffeemakerConsumer", "netlet"]

    finalizedBy (haltme)
}

test {
    description = 'Tests local and remote services with JUnit test case.'
    systemProperty "java.rmi.server.codebase",
            "${websterUrl}/${repoPath()}/coffeemaker-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"

    testLogging {
        events "passed", "skipped", "failed"/*, "standardOut", "standardError"*/
    }
    //dependsOn([install])
    dependsOn([install, bootme])
    finalizedBy(haltme)
}
//test.enabled = false







