/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: HaltMePlugin

task bootme(type: BootMe)

class BootMe extends DefaultTask {
    @InputFile
    File starterConfig
    @Input @Optional
    def systemProperties = [:]
    @Input @Optional
    boolean spawn = true
    @Input @Optional
    boolean debug
    @Input @Optional
    def environment = [:]

    @TaskAction
    def bootMe() {
        StringBuilder java = new StringBuilder()
        if (System.getProperty("os.name").startsWith("Windows"))
            java.append("java")
        else
            java.append(System.getProperty('java.home')).append("/bin/java")

        def args = []
        if (System.getProperty("os.name").startsWith("Windows")) {
            args << "cmd.exe"
            args << "/C"
        }
        args << java.toString()
        args << "-cp"
        args << project.bootClassPath.getAsPath()
        if (debug) {
            args << "-Xdebug"
            args << "-Xrunjdwp:transport=dt_socket,server=y,address=8765"
        }
        args << "-Dproject.id=${project.name}"
        args << "-Djava.protocol.handler.pkgs=net.jini.url|sorcer.util.url|org.rioproject.url"

        // use distribution or project specific java.util.logging.config.file
        if (System.getProperty("java.util.logging.config.file") != null)
            args << "-Djava.util.logging.config.file=${System.getProperty("java.util.logging.config.file")}"
        else
            args << "-Djava.util.logging.config.file=${project.sorcerHome}/configs/sorcer.logging"

        if (System.getProperty("logback.configurationFile") != null)
            args << "-Dlogback.configurationFile=${System.getProperty("logback.configurationFile")}"
        else
            args << "-Dlogback.configurationFile=${project.sorcerHome}/configs/sorcer-logging.groovy"

        if(!spawn)
            args << "-DforceConsoleLogging=true"

        String logName = project.path.substring(1).replaceAll(":", ".")
        args << "-Drio.log.dir=${project.sorcerHome}/logs"
        args << "-Dorg.rioproject.service=${logName}"
        args << "-Djava.security.policy=${project.sorcerHome}/policy/policy.all"
        args << "-Djava.rmi.server.useCodebaseOnly=false"
        args << "-Djava.net.preferIPv4Stack=true"
        args << "-Djava.net.preferIPv4Stack=true"
        args << "-Dplexus.version=${project.plexusVersion}"
        args << "-Driver.version=${project.riverVersion}"
        args << "-Dsorcer.version=${project.sorcerVersion}"
        args << "-Dsorcer.home=${project.sorcerHome}"
        args << "-Drio.home=${project.sorcerHome}/rio-${project.rioVersion}"
        args << "-Dsorcer.env.file=${project.sorcerHome}/configs/sorcer.env"
        args << "-Dproject.build.dir=${project.buildDir.path}"
        systemProperties.each { k, v ->
            args << "-D$k=$v"
        }
        args << "com.sun.jini.start.ServiceStarter"
        args << "${starterConfig.path}"

        if(project.logger.isInfoEnabled()) {
            StringBuilder sb = new StringBuilder()
            for(String arg : args) {
                if(sb.length()>0)
                    sb.append(" ")
                sb.append(arg)
            }
            project.logger.info "\nCommand line\n=================\n${sb.toString()}\n"
        }
        ProcessBuilder pb = new ProcessBuilder(args as String[])
        Map<String, String> env = pb.environment()
        env.put("SORCER_HOME", "${project.sorcerHome}")
        env.put("RIO_HOME", "${project.rioHome}")
        environment.each { key, value ->
            env.put(key, value)
        }

        Process process = pb.start()
        if (!spawn) {
            process.consumeProcessOutput(System.out, System.err)
            process.waitFor()
        } else {
            process.in.close()
            process.out.close()
            process.err.close()
        }
    }
}

class HaltMePlugin implements Plugin<Project> {

    void apply(Project project) {
        project.task('haltme') {
            doLast {
                def pids = []
                "jps -v".execute().text.eachLine { line ->
                    if(line.contains("project.id=${project.name}")) {
                        pids << line.split()[0]
                    }
                }
                String command
                if (System.getProperty("os.name").startsWith("Windows")) {
                    command = "taskkill /f /pid "
                } else {
                    command = "kill "
                }
                pids.each { pid ->
                    "$command $pid".execute().waitFor()
                }
            }
        }
    }

}

