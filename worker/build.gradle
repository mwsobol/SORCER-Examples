/*
 * Copyright to the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencies {
	compile "org.sorcer:sorcer-platform:${sorcerVersion}"
	compile "org.sorcer:sorcer-lib:${sorcerVersion}"
	compile "org.sorcer:sos-db-prv:${sorcerVersion}"
	testCompile "org.sorcer:sorcer-test:${sorcerVersion}"
	testRuntime logRuntime
}

jar {
	manifest {
		attributes("Implementation-Title": "SORCER Worker Provider", "Implementation-Version": version)
	}
	//baseName = "worker-impl"
	classifier = "prv"
	dependsOn classes
	from sourceSets.main.output
	exclude('sorcer/worker/requestor/**')
}

task workerPrvDlJar(type: Jar) {
	manifest {
		attributes("Implementation-Title": "SORCER Worker Exported Classes", "Implementation-Version": version)
	}
	//baseName = "worker-dl"
    classifier = "dl"
	dependsOn classes
	from sourceSets.main.output
	include('sorcer/worker/provider/*')
	from sourceSets.main.output
	include('sorcer/worker/requestor/Works*')
	from sourceSets.main.resources
	include('sorcer.jpg')
}

task workerReqJar(type: Jar) {
	manifest {
		attributes("Implementation-Title": "SORCER Worker Requestor", "Implementation-Version": version)
	}
	classifier = "req"
	dependsOn classes
	from sourceSets.main.output
	include('sorcer/worker/requestor/**')
}

artifacts {
    archives workerPrvDlJar
	archives workerReqJar
}

install.dependsOn(['workerPrvDlJar', 'workerReqJar'])
build.dependsOn(install)

def repoPath() {
	"${project.group.replace(".", "/")}/${project.name}/${version}"
}

bootme {
	starterConfig = file("${projectDir.path}/configs/StartAll.groovy")
    systemProperties = ["local.repo.path" : repoPath(),
                        "project.dir" : "${project.projectDir.path}",
						"project.version" : project.version,
						"webster.url" : websterUrl]
    //spawn = false
}

test {
	systemProperty "java.rmi.server.codebase",
				   "${websterUrl}/${repoPath()}/worker-${version}-dl.jar ${websterUrl}/sorcer-dl-${version}.jar ${websterUrl}/jsk-dl-${riverVersion}.jar"

	testLogging {
		events "passed", "skipped", "failed"/*, "standardOut", "standardError"*/
	}

	dependsOn([install, bootme])
	finalizedBy(haltme)
}
test.onlyIf{ file("${sorcerDistHome}").exists() }







